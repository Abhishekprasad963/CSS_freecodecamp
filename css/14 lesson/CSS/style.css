* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }
  
  body {
    font-family:'Courier New', Courier, monospace;
    min-height: 100vh;
    padding: 20px;
  }
  .container{
    min-width: 800px;
    min-height: 400px;
    margin-inline: auto;
    border: 1px solid#000;
    display: flex;
    gap: 1rem;
   /*  justify-content: flex-start; */
   /* justify-content:flex-end; *//* it will move the flex i.e objects left and right */
 /*   justify-content: center; */
 /* justify-content: space-between; */
 justify-content: space-evenly;
/*  align-items: flex-start; *//* the items will move up and down related to the direction i.e in this
 top of the page */
 align-items: center;
 /* flex-direction:row ; *//* it willchange items to row */
/*  flex-direction: row-reverse; */
 /* flex-wrap: wrap; */
 flex-flow: row-reverse wrap;/* it will make the objects in coumn and row like 
 matrices */
/* and row reverse will only reverse the elements in the row */
 align-content: space-evenly;
 

  }
  .box{
   /*  min-width: 100px; */

    min-height: 100px;
    background-color: #000;
    color: #fff;
    font-size: 2rem;
    padding: 0.5rem; 
/* 
    flex-grow: 1; *//* the object will take that much space as much
    it can take */
    /* flex-basis: 100px; *//* it increases the width */
    /* flex-shrink: 1;
    flex-shrink: 250px; *//* the object will take that much space as much
    it can take */
    flex: 1 1 250px;/* GROWW , SHRINKK , BASIS */
  }
  .box:nth-child(2){
    flex: 2 2 250px;
    order: 4;/* it will move the object at that index number
    which given */
    
/* NOTE:while using order remember at which iindex the element is because it will be
store then when you put another value for order the flex box will move from that index */



/* flex notes-(FLEXBOX FRROGGY)
1. justify-content: shifts elements vertically
flex-direction. This CSS property defines the direction items are placed in the container, and accepts the following values:

row: Items are placed the same as the text direction.
row-reverse: Items are placed opposite to the text direction.
column: Items are placed top to bottom.
column-reverse: Items are placed bottom to top.


2.justify-content:shifts elements horizontally
align-items to help the frogs get to the bottom of the pond. This CSS property aligns items vertically and accepts the following values:

flex-start: Items align to the top of the container.
flex-end: Items align to the bottom of the container.
center: Items align at the vertical center of the container.
baseline: Items display at the baseline of the container.
stretch: Items are stretched to fit the container.


3.flex-direction. This CSS property defines the direction items are placed in the container, and accepts the following values:

row: Items are placed the same as the text direction.
row-reverse: Items are placed opposite to the text direction.
column: Items are placed top to bottom.
column-reverse: Items are placed bottom to top. 



4.Sometimes reversing the row or column order of a container is not enough. In these cases, we can apply the order property to individual items.
 By default, items have a value of 0, but we can use this property to also set it to a positive or negative integer value (-2, -1, 0, 1, 2).
Use the order property to reorder the frogs according to their lilypads.


align-items=
Aligns flex items along the cross axis.
flex-start flex-end center baseline stretch (default)

align -self=
Aligns a flex item along the cross axis, overriding the align-items value.
flex-start flex-end center baseline stretch




5.Oh no! The frogs are all squeezed onto a single row of lilypads. Spread them out using the flex-wrap property, which accepts the following values:

nowrap: Every item is fit to a single line.
wrap: Items wrap around to additional lines.
wrap-reverse: Items wrap around to additional lines in reverse.




6.The two properties flex-direction and flex-wrap are used so often together that the shorthand property flex-flow was created to combine them.
 This shorthand property accepts the value of the two properties separated by a space.
For example, you can use flex-flow: row wrap to set rows and wrap them.
Try using flex-flow to repeat the previous level.*/


  }